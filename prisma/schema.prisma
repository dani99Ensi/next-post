generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model locations {
  id         String      @id @default(cuid()) //CUID (Collision-resistant Unique Identifier). 
  address    String      @db.VarChar
  zip_code   Int
  created_at DateTime    @default(now()) @db.Timestamp(6) //6 digits of precision for the fractional seconds
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  employees  employees[]
  orders     orders[]
  products   products[]
}

//I can use @@map(name: "something") if necessary brother Camargo
model orders {
  id            String          @id @default(cuid())
  user_id       String          @db.VarChar
  total_price   Decimal         @db.Decimal
  status_id     String          @db.VarChar
  location_id   String          @db.VarChar
  created_at    DateTime        @default(now()) @db.Timestamp(6) 
  updated_at    DateTime        @updatedAt
  orderproducts orderproducts[]
  locations     locations       @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderstatuses orderstatuses   @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orderstatuses {
  id         String   @id @default(cuid())
  name       String   @unique @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  orders     orders[]
}

model products {
  id                 String               @id @default(cuid())
  location_id        String               @db.VarChar
  name               String               @db.VarChar
  description        String?
  price              Decimal              @db.Decimal
  stripe_id          String               @db.VarChar
  deleted_at         DateTime?            @db.Timestamp(6)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @updatedAt
  orderproducts      orderproducts[]
  productingredients productingredients[]
  locations          locations            @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                 String               @id @default(cuid())
  stripe_id          String               @db.VarChar
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @updatedAt
  accounts           accounts[]
  orders             orders[]
  sessions           sessions[]
  verificationtokens verificationtokens[]
}

model accounts {
  id         String    @id @default(cuid()) 
  user_id    String    @db.VarChar
  identifier String    @db.VarChar
  token      String    @db.VarChar
  provider   String    @db.VarChar
  expires    DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employees {
  id          String    @id @default(cuid())
  location_id String    @db.VarChar
  role_id     String    @db.VarChar
  code        Decimal   @unique @db.Decimal
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  locations   locations @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ingredientcategories {
  id          String        @id @default(cuid())
  name        String        @db.VarChar
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @updatedAt
  ingredients ingredients[]
}

model ingredients {
  id                   String               @id @default(cuid())
  name                 String               @db.VarChar
  unit                 String               @db.VarChar
  category_id          String               @db.VarChar
  qty_in_stock         Int
  price                Decimal              @db.Decimal
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  updated_at           DateTime             @updatedAt
  ingredientcategories ingredientcategories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productingredients   productingredients[]
}

model orderproducts {
  id         String   @id @default(cuid())
  order_id   String   @db.VarChar
  product_id String   @db.VarChar
  quantity   Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model productingredients {
  id            String      @id @default(cuid())
  product_id    String      @db.VarChar
  ingredient_id String      @db.VarChar
  qty_needed    Int
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @updatedAt
  ingredients   ingredients @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products      products    @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id         String      @id @default(cuid())
  name       String      @db.VarChar
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @updatedAt
  employees  employees[]
}

model sessions {
  id            String   @id @default(cuid())
  session_token String   @db.VarChar
  user_id       String   @db.VarChar
  expires       DateTime @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model verificationtokens {
  id         String   @id @default(cuid())
  user_id    String   @db.VarChar
  token      String   @unique @db.VarChar
  expires    DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
